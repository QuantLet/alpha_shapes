alpha_values = c(50,100,1000,10000)
shape = ashape(x, alpha=0.01)
hull  = c(hull, hull[1])
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=0.05)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=0.11)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=1)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=5)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
plot(x, main="convex hull", axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
lines(x[hull, ], col='red',lwd=2)
#png("a_comparison_plots.png", width=900, height=600, bg = "transparent")
#dev.off()
library("mlbench")
library("alphahull")
library("igraph")
#dev.off()
crix = read.csv("crix.csv")
vcrix = read.csv("vcrix.csv")
par(mfrow=c(1,1))
vcrix = vcrix[vcrix$date>'2017-01-01',]
crix = crix[crix$date>'2016-05-01',]
x       = cbind(crix$price,vcrix$vcrix)
x       = unique(x)
par(mfrow=c(2,3))
hull   = chull(x)
alpha_values = c(50,100,1000,10000)
shape = ashape(x, alpha=0.01)
hull  = c(hull, hull[1])
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=0.05)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=0.123)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=1)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=5)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
plot(x, main="convex hull", axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
lines(x[hull, ], col='red',lwd=2)
#png("a_comparison_plots.png", width=900, height=600, bg = "transparent")
#dev.off()
library("mlbench")
library("alphahull")
library("igraph")
#dev.off()
crix = read.csv("crix.csv")
vcrix = read.csv("vcrix.csv")
par(mfrow=c(1,1))
vcrix = vcrix[vcrix$date>'2017-01-01',]
crix = crix[crix$date>'2016-05-01',]
x       = cbind(crix$price,vcrix$vcrix)
x       = unique(x)
par(mfrow=c(2,3))
hull   = chull(x)
alpha_values = c(50,100,1000,10000)
shape = ashape(x, alpha=0.01)
hull  = c(hull, hull[1])
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=0.05)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=0.121)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=1)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=5)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
plot(x, main="convex hull", axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
lines(x[hull, ], col='red',lwd=2)
#png("a_comparison_plots.png", width=900, height=600, bg = "transparent")
#dev.off()
library("mlbench")
library("alphahull")
library("igraph")
#dev.off()
crix = read.csv("crix.csv")
vcrix = read.csv("vcrix.csv")
par(mfrow=c(1,1))
vcrix = vcrix[vcrix$date>'2017-01-01',]
crix = crix[crix$date>'2016-05-01',]
x       = cbind(crix$price,vcrix$vcrix)
x       = unique(x)
par(mfrow=c(2,3))
hull   = chull(x)
alpha_values = c(50,100,1000,10000)
shape = ashape(x, alpha=0.01)
hull  = c(hull, hull[1])
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=0.05)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=0.122)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=1)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=5)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
plot(x, main="convex hull", axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
lines(x[hull, ], col='red',lwd=2)
#png("a_comparison_plots.png", width=900, height=600, bg = "transparent")
#dev.off()
library("mlbench")
library("alphahull")
library("igraph")
#dev.off()
crix = read.csv("crix.csv")
vcrix = read.csv("vcrix.csv")
par(mfrow=c(1,1))
vcrix = vcrix[vcrix$date>'2017-01-01',]
crix = crix[crix$date>'2016-05-01',]
x       = cbind(crix$price,vcrix$vcrix)
x       = unique(x)
par(mfrow=c(2,3))
hull   = chull(x)
alpha_values = c(50,100,1000,10000)
shape = ashape(x, alpha=0.01)
hull  = c(hull, hull[1])
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=0.05)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=0.123)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=1)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=5)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
plot(x, main="convex hull", axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
lines(x[hull, ], col='red',lwd=2)
#png("a_comparison_plots.png", width=900, height=600, bg = "transparent")
#dev.off()
library("mlbench")
library("alphahull")
library("igraph")
#dev.off()
crix = read.csv("crix.csv")
vcrix = read.csv("vcrix.csv")
par(mfrow=c(1,1))
vcrix = vcrix[vcrix$date>'2017-01-01',]
crix = crix[crix$date>'2016-05-01',]
x       = cbind(crix$price,vcrix$vcrix)
x       = unique(x)
par(mfrow=c(2,3))
hull   = chull(x)
alpha_values = c(50,100,1000,10000)
shape = ashape(x, alpha=0.01)
hull  = c(hull, hull[1])
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=0.05)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=0.123)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=0.2)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=5)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
plot(x, main="convex hull", axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
lines(x[hull, ], col='red',lwd=2)
#png("a_comparison_plots.png", width=900, height=600, bg = "transparent")
#dev.off()
library("mlbench")
library("alphahull")
library("igraph")
#dev.off()
crix = read.csv("crix.csv")
vcrix = read.csv("vcrix.csv")
par(mfrow=c(1,1))
vcrix = vcrix[vcrix$date>'2016-05-01',]
crix = crix[crix$date>'2016-05-01',]
x       = cbind(crix$price,vcrix$vcrix)
x       = unique(x)
par(mfrow=c(2,3))
hull   = chull(x)
alpha_values = c(50,100,1000,10000)
shape = ashape(x, alpha=0.01)
hull  = c(hull, hull[1])
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.01"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=0.05)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.05"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=0.123)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=0.2)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=5)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
plot(x, main="convex hull", axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
lines(x[hull, ], col='red',lwd=2)
#png("a_comparison_plots.png", width=900, height=600, bg = "transparent")
#dev.off()
library("mlbench")
library("alphahull")
library("igraph")
#dev.off()
crix = read.csv("crix.csv")
vcrix = read.csv("vcrix.csv")
par(mfrow=c(1,1))
vcrix = vcrix[vcrix$date>'2016-05-01',]
crix = crix[crix$date>'2016-05-01',]
x       = cbind(crix$price,vcrix$vcrix)
x       = unique(x)
par(mfrow=c(2,3))
hull   = chull(x)
alpha_values = c(50,100,1000,10000)
shape = ashape(x, alpha=0.01)
hull  = c(hull, hull[1])
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.01"))) , axes=F, pch=19, cex=0.5,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=0.05)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.05"))) , axes=F, pch=19, cex=0.5,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=0.123)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=0.5,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=0.2)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=0.5,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=5)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=0.5,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
plot(x, main="convex hull", axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
lines(x[hull, ], col='red',lwd=2)
#png("a_comparison_plots.png", width=900, height=600, bg = "transparent")
#dev.off()
library("mlbench")
library("alphahull")
library("igraph")
#dev.off()
crix = read.csv("crix.csv")
vcrix = read.csv("vcrix.csv")
par(mfrow=c(1,1))
vcrix = vcrix[vcrix$date>'2016-05-01',]
crix = crix[crix$date>'2016-05-01',]
x       = cbind(crix$price,vcrix$vcrix)
x       = unique(x)
par(mfrow=c(2,3))
hull   = chull(x)
alpha_values = c(50,100,1000,10000)
shape = ashape(x, alpha=0.01)
hull  = c(hull, hull[1])
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.01"))) , axes=F, pch=19, cex=0.5,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=0.07)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.05"))) , axes=F, pch=19, cex=0.5,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=0.123)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=0.5,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=0.2)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=0.5,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=5)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 0.123"))) , axes=F, pch=19, cex=0.5,xlab="", ylab="",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
plot(x, main="convex hull", axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
lines(x[hull, ], col='red',lwd=2)
#png("a_comparison_plots.png", width=900, height=600, bg = "transparent")
#dev.off()
library("mlbench")
library("alphahull")
library("igraph")
dev.off()
crix = read.csv("crix.csv")
vcrix = read.csv("vcrix.csv")
vcrix = vcrix[vcrix$date>'2016-05-01',]
crix = crix[crix$date>'2016-05-01',]
x       = cbind(crix$price,vcrix$vcrix)
x       = unique(x)
par(mfrow=c(2,3))
hull   = chull(x)
alpha_values = c(50,100,1000,10000)
shape = ashape(x, alpha=10)
hull  = c(hull, hull[1])
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 10"))) , axes=T, pch=19, cex=0.5,xlab="CRIX", ylab="VCRIX",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=100)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 100"))) , axes=T, pch=19, cex=0.5,xlab="CRIX", ylab="VCRIX",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=1000)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 1000"))) , axes=T, pch=19, cex=0.5,xlab="CRIX", ylab="VCRIX",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=10000)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 10 000"))) , axes=T, pch=19, cex=0.5,xlab="CRIX", ylab="VCRIX",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=50000)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 50 000"))) , axes=T, pch=19, cex=0.5,xlab="CRIX", ylab="VCRIX",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
plot(x, main="convex hull", axes=T, pch=19, cex=0.5,xlab="CRIX", ylab="VCRIX",cex.main=3)
lines(x[hull, ], col='red',lwd=2)
png("crix_vcrix_alpha.png", width=900, height=600, bg = "transparent")
dev.off()
library("mlbench")
library("alphahull")
library("igraph")
dev.off()
crix = read.csv("crix.csv")
vcrix = read.csv("vcrix.csv")
vcrix = vcrix[vcrix$date>'2016-05-01',]
crix = crix[crix$date>'2016-05-01',]
x       = cbind(crix$price,vcrix$vcrix)
x       = unique(x)
par(mfrow=c(2,3))
hull   = chull(x)
alpha_values = c(50,100,1000,10000)
shape = ashape(x, alpha=10)
hull  = c(hull, hull[1])
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 10"))) , axes=T, pch=19, cex=0.5,xlab="CRIX", ylab="VCRIX",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=100)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 100"))) , axes=T, pch=19, cex=0.5,xlab="CRIX", ylab="VCRIX",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=1000)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 1000"))) , axes=T, pch=19, cex=0.5,xlab="CRIX", ylab="VCRIX",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=10000)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 10 000"))) , axes=T, pch=19, cex=0.5,xlab="CRIX", ylab="VCRIX",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
shape = ashape(x, alpha=50000)
plot(x, main=expression(bold(paste(alpha,"-shape for ", alpha, " = 50 000"))) , axes=T, pch=19, cex=0.5,xlab="CRIX", ylab="VCRIX",cex.main=3)
plot(shape, add=T, wpoints=F, col = 'red')
plot(x, main="convex hull", axes=T, pch=19, cex=0.5,xlab="CRIX", ylab="VCRIX",cex.main=3)
lines(x[hull, ], col='red',lwd=2)
png("crix_vcrix_alpha.png", width=900, height=600, bg = "transparent")
dev.off()
library("mlbench")
library("alphahull")
library("igraph")
library(spatstat)
x       = runif(150)
y       = runif(150)
x       = cbind(x,y)
x       = unique(x)
par(mfrow=c(1,3))
graph   = graph.adjacency(as.matrix(dist(x)), weighted=TRUE)
mst     = as.undirected(minimum.spanning.tree(graph))
idx     = get.edges(mst, E(mst))
plot(x, axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
for (i in seq(nrow(idx))) {
ft    = idx[i,]
lines(x[ft,1], x[ft,2], col ='red',lwd=2)
}
boxplot(idx[,1],border = 'red', ylim= c(0,max(idx[,1])))
my.triangles<-tri.mesh(x[,1], x[,2])
plot(my.triangles, do.points=FALSE, lwd=0.2, col='red')
points(x[,1], x[,2], col = "black", pch=20, cex = 1.5)
plot (delaunay(x))
my.triangles<-tri.mesh(x[,1], x[,2])
plot(my.triangles, do.points=FALSE, lwd=0.2, col='red')
points(x[,1], x[,2], col = "black", pch=20, cex = 1.5)
plot(my.triangles, do.points=FALSE, lwd=0.2, col='red')
points(x[,1], x[,2], col = "black", pch=20, cex = 1.5)
library(tripack)
my.triangles<-tri.mesh(x[,1], x[,2])
plot(my.triangles, do.points=FALSE, lwd=0.2, col='red')
points(x[,1], x[,2], col = "black", pch=20, cex = 1.5)
setwd("~/alpha_shape_comparison")
library("mlbench")
library("alphahull")
library("igraph")
library("mlbench")
library("alphahull")
library("igraph")
library("tripack")
library("spatstat")
set.seed(1234)
x       = runif(150)
y       = runif(150)
x       = cbind(x,y)
x       = unique(x)
png("alpha_mst_delaunay_box.png", width=900, height=600, bg = "transparent")
par(mfrow=c(1,3))
my.triangles<-tri.mesh(x[,1], x[,2])
plot(my.triangles, do.points=FALSE, lwd=0.2, col='red')
points(x[,1], x[,2], col = "black", pch=20, cex = 1.5)
#minimum spanning tree
graph   = graph.adjacency(as.matrix(dist(x)), weighted=TRUE)
mst     = as.undirected(minimum.spanning.tree(graph))
idx     = get.edges(mst, E(mst))
plot(x, axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
for (i in seq(nrow(idx))) {
ft    = idx[i,]
lines(x[ft,1], x[ft,2], col ='red',lwd=2)
}
#hull    = chull(x)
#shape   = ashape(x, alpha=0.123)
#hull    = c(hull, hull[1])
boxplot(idx[,1],border = 'red', ylim= c(0,max(idx[,1])))
dev.off()
## Clearing Variables and Close Windows
rm(list = ls(all = TRUE))
graphics.off()
## Loading Libraries
libraries = c("mlbench", "alphahull", "igraph", "tripack", "spatstat")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
set.seed(1234)
setwd("~/alpha_shapes")
png("alpha_mst_delaunay_box.png", width=900, height=600, bg = "transparent")
par(mfrow=c(1,3))
my.triangles = tri.mesh(x[,1], x[,2])
plot(my.triangles, do.points=FALSE, lwd=0.2, col='red')
points(x[,1], x[,2], col = "black", pch=20, cex = 1.5)
x            = runif(150)
y            = runif(150)
x            = cbind(x,y)
x            = unique(x)
png("alpha_mst_delaunay_box.png", width=900, height=600, bg = "transparent")
par(mfrow=c(1,3))
my.triangles = tri.mesh(x[,1], x[,2])
plot(my.triangles, do.points=FALSE, lwd=0.2, col='red')
points(x[,1], x[,2], col = "black", pch=20, cex = 1.5)
## Clearing Variables and Close Windows
rm(list = ls(all = TRUE))
graphics.off()
## Loading Libraries
libraries = c("mlbench", "alphahull", "igraph", "tripack", "spatstat")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
set.seed(1234)
x            = runif(150)
y            = runif(150)
x            = cbind(x,y)
x            = unique(x)
png("alpha_mst_delaunay_box.png", width=900, height=600, bg = "transparent")
par(mfrow=c(1,3))
## Delaunay triangulation
my.triangles = tri.mesh(x[,1], x[,2])
plot(my.triangles, do.points=FALSE, lwd=0.2, col='red')
points(x[,1], x[,2], col = "black", pch=20, cex = 1.5)
## Minimum spanning tree
graph       = graph.adjacency(as.matrix(dist(x)), weighted=TRUE)
mst         = as.undirected(minimum.spanning.tree(graph))
idx         = get.edges(mst, E(mst))
plot(x, axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
for (i in seq(nrow(idx))) {
ft    = idx[i,]
lines(x[ft,1], x[ft,2], col ='red',lwd=2)
}
## Edge lenght boxplot
boxplot(idx[,1],border = 'red', ylim= c(0,max(idx[,1])))
dev.off()
## Clearing Variables and Close Windows
rm(list = ls(all = TRUE))
graphics.off()
## Loading Libraries
libraries = c("mlbench", "alphahull", "igraph", "tripack", "spatstat")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
set.seed(1234)
x            = runif(150)
y            = runif(150)
x            = cbind(x,y)
x            = unique(x)
png("alpha_mst_delaunay_box.png", width=900, height=600, bg = "transparent")
par(mfrow=c(1,3))
## Delaunay triangulation
my.triangles = tri.mesh(x[,1], x[,2])
plot(my.triangles, do.points=FALSE, lwd=0.2, col='red',main=F)
points(x[,1], x[,2], col = "black", pch=20, cex = 1.5)
## Minimum spanning tree
graph       = graph.adjacency(as.matrix(dist(x)), weighted=TRUE)
mst         = as.undirected(minimum.spanning.tree(graph))
idx         = get.edges(mst, E(mst))
plot(x, axes=F, pch=19, cex=1,xlab="", ylab="",cex.main=3)
for (i in seq(nrow(idx))) {
ft    = idx[i,]
lines(x[ft,1], x[ft,2], col ='red',lwd=2)
}
## Edge lenght boxplot
boxplot(idx[,1],border = 'red', ylim= c(0,max(idx[,1])))
dev.off()
